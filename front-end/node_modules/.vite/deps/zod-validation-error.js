import {
  ZodError
} from "./chunk-WD5HYJAR.js";
import {
  __publicField
} from "./chunk-2GTGKKMZ.js";

// node_modules/zod-validation-error/dist/esm/utils/joinPath.js
var identifierRegex = /[$_\p{ID_Start}][$\u200c\u200d\p{ID_Continue}]*/u;
function joinPath(path) {
  if (path.length === 1) {
    return path[0].toString();
  }
  return path.reduce((acc, item) => {
    if (typeof item === "number") {
      return acc + "[" + item.toString() + "]";
    }
    if (item.includes('"')) {
      return acc + '["' + escapeQuotes(item) + '"]';
    }
    if (!identifierRegex.test(item)) {
      return acc + '["' + item + '"]';
    }
    const separator = acc.length === 0 ? "" : ".";
    return acc + separator + item;
  }, "");
}
function escapeQuotes(str) {
  return str.replace(/"/g, '\\"');
}

// node_modules/zod-validation-error/dist/esm/utils/NonEmptyArray.js
function isNonEmptyArray(value) {
  return value.length !== 0;
}

// node_modules/zod-validation-error/dist/esm/ValidationError.js
var MAX_ISSUES_IN_MESSAGE = 99;
var ISSUE_SEPARATOR = "; ";
var UNION_SEPARATOR = ", or ";
var PREFIX = "Validation error";
var PREFIX_SEPARATOR = ": ";
var ValidationError = class extends Error {
  constructor(message, details = []) {
    super(message);
    __publicField(this, "details");
    __publicField(this, "name");
    this.details = details;
    this.name = "ZodValidationError";
  }
  toString() {
    return this.message;
  }
};
function getMessageFromZodIssue(props) {
  const { issue, issueSeparator, unionSeparator, includePath } = props;
  if (issue.code === "invalid_union") {
    return issue.unionErrors.reduce((acc, zodError) => {
      const newIssues = zodError.issues.map((issue2) => getMessageFromZodIssue({
        issue: issue2,
        issueSeparator,
        unionSeparator,
        includePath
      })).join(issueSeparator);
      if (!acc.includes(newIssues)) {
        acc.push(newIssues);
      }
      return acc;
    }, []).join(unionSeparator);
  }
  if (includePath && isNonEmptyArray(issue.path)) {
    if (issue.path.length === 1) {
      const identifier = issue.path[0];
      if (typeof identifier === "number") {
        return `${issue.message} at index ${identifier}`;
      }
    }
    return `${issue.message} at "${joinPath(issue.path)}"`;
  }
  return issue.message;
}
function conditionallyPrefixMessage(reason, prefix, prefixSeparator) {
  if (prefix !== null) {
    if (reason.length > 0) {
      return [prefix, reason].join(prefixSeparator);
    }
    return prefix;
  }
  if (reason.length > 0) {
    return reason;
  }
  return PREFIX;
}
function fromZodIssue(issue, options = {}) {
  const { issueSeparator = ISSUE_SEPARATOR, unionSeparator = UNION_SEPARATOR, prefixSeparator = PREFIX_SEPARATOR, prefix = PREFIX, includePath = true } = options;
  const reason = getMessageFromZodIssue({
    issue,
    issueSeparator,
    unionSeparator,
    includePath
  });
  const message = conditionallyPrefixMessage(reason, prefix, prefixSeparator);
  return new ValidationError(message, [issue]);
}
function fromZodError(zodError, options = {}) {
  const { maxIssuesInMessage = MAX_ISSUES_IN_MESSAGE, issueSeparator = ISSUE_SEPARATOR, unionSeparator = UNION_SEPARATOR, prefixSeparator = PREFIX_SEPARATOR, prefix = PREFIX, includePath = true } = options;
  const reason = zodError.errors.slice(0, maxIssuesInMessage).map((issue) => getMessageFromZodIssue({
    issue,
    issueSeparator,
    unionSeparator,
    includePath
  })).join(issueSeparator);
  const message = conditionallyPrefixMessage(reason, prefix, prefixSeparator);
  return new ValidationError(message, zodError.errors);
}
var toValidationError = (options = {}) => (err) => {
  if (err instanceof ZodError) {
    return fromZodError(err, options);
  }
  if (err instanceof Error) {
    return new ValidationError(err.message);
  }
  return new ValidationError("Unknown error");
};
function isValidationError(err) {
  return err instanceof ValidationError;
}
function isValidationErrorLike(err) {
  return err instanceof Error && err.name === "ZodValidationError";
}
var errorMap = (issue, ctx) => {
  const error = fromZodIssue({
    ...issue,
    message: issue.message ?? ctx.defaultError
  });
  return {
    message: error.message
  };
};
export {
  ValidationError,
  errorMap,
  fromZodError,
  fromZodIssue,
  isValidationError,
  isValidationErrorLike,
  toValidationError
};
//# sourceMappingURL=zod-validation-error.js.map
