{
  "version": 3,
  "sources": ["../../zod-validation-error/dist/esm/utils/joinPath.js", "../../zod-validation-error/dist/esm/utils/NonEmptyArray.js", "../../zod-validation-error/dist/esm/ValidationError.js"],
  "sourcesContent": ["const identifierRegex = /[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*/u;\nexport function joinPath(path) {\n    if (path.length === 1) {\n        return path[0].toString();\n    }\n    return path.reduce((acc, item) => {\n        if (typeof item === 'number') {\n            return acc + '[' + item.toString() + ']';\n        }\n        if (item.includes('\"')) {\n            return acc + '[\"' + escapeQuotes(item) + '\"]';\n        }\n        if (!identifierRegex.test(item)) {\n            return acc + '[\"' + item + '\"]';\n        }\n        const separator = acc.length === 0 ? '' : '.';\n        return acc + separator + item;\n    }, '');\n}\nfunction escapeQuotes(str) {\n    return str.replace(/\"/g, '\\\\\"');\n}\n", "export function isNonEmptyArray(value) {\n    return value.length !== 0;\n}\n", "import * as zod from 'zod';\nimport { joinPath } from './utils/joinPath';\nimport { isNonEmptyArray } from './utils/NonEmptyArray';\nconst MAX_ISSUES_IN_MESSAGE = 99;\nconst ISSUE_SEPARATOR = '; ';\nconst UNION_SEPARATOR = ', or ';\nconst PREFIX = 'Validation error';\nconst PREFIX_SEPARATOR = ': ';\nexport class ValidationError extends Error {\n    details;\n    name;\n    constructor(message, details = []) {\n        super(message);\n        this.details = details;\n        this.name = 'ZodValidationError';\n    }\n    toString() {\n        return this.message;\n    }\n}\nfunction getMessageFromZodIssue(props) {\n    const { issue, issueSeparator, unionSeparator, includePath } = props;\n    if (issue.code === 'invalid_union') {\n        return issue.unionErrors\n            .reduce((acc, zodError) => {\n            const newIssues = zodError.issues\n                .map((issue) => getMessageFromZodIssue({\n                issue,\n                issueSeparator,\n                unionSeparator,\n                includePath,\n            }))\n                .join(issueSeparator);\n            if (!acc.includes(newIssues)) {\n                acc.push(newIssues);\n            }\n            return acc;\n        }, [])\n            .join(unionSeparator);\n    }\n    if (includePath && isNonEmptyArray(issue.path)) {\n        if (issue.path.length === 1) {\n            const identifier = issue.path[0];\n            if (typeof identifier === 'number') {\n                return `${issue.message} at index ${identifier}`;\n            }\n        }\n        return `${issue.message} at \"${joinPath(issue.path)}\"`;\n    }\n    return issue.message;\n}\nfunction conditionallyPrefixMessage(reason, prefix, prefixSeparator) {\n    if (prefix !== null) {\n        if (reason.length > 0) {\n            return [prefix, reason].join(prefixSeparator);\n        }\n        return prefix;\n    }\n    if (reason.length > 0) {\n        return reason;\n    }\n    return PREFIX;\n}\nexport function fromZodIssue(issue, options = {}) {\n    const { issueSeparator = ISSUE_SEPARATOR, unionSeparator = UNION_SEPARATOR, prefixSeparator = PREFIX_SEPARATOR, prefix = PREFIX, includePath = true, } = options;\n    const reason = getMessageFromZodIssue({\n        issue,\n        issueSeparator,\n        unionSeparator,\n        includePath,\n    });\n    const message = conditionallyPrefixMessage(reason, prefix, prefixSeparator);\n    return new ValidationError(message, [issue]);\n}\nexport function fromZodError(zodError, options = {}) {\n    const { maxIssuesInMessage = MAX_ISSUES_IN_MESSAGE, issueSeparator = ISSUE_SEPARATOR, unionSeparator = UNION_SEPARATOR, prefixSeparator = PREFIX_SEPARATOR, prefix = PREFIX, includePath = true, } = options;\n    const reason = zodError.errors\n        .slice(0, maxIssuesInMessage)\n        .map((issue) => getMessageFromZodIssue({\n        issue,\n        issueSeparator,\n        unionSeparator,\n        includePath,\n    }))\n        .join(issueSeparator);\n    const message = conditionallyPrefixMessage(reason, prefix, prefixSeparator);\n    return new ValidationError(message, zodError.errors);\n}\nexport const toValidationError = (options = {}) => (err) => {\n    if (err instanceof zod.ZodError) {\n        return fromZodError(err, options);\n    }\n    if (err instanceof Error) {\n        return new ValidationError(err.message);\n    }\n    return new ValidationError('Unknown error');\n};\nexport function isValidationError(err) {\n    return err instanceof ValidationError;\n}\nexport function isValidationErrorLike(err) {\n    return err instanceof Error && err.name === 'ZodValidationError';\n}\nexport const errorMap = (issue, ctx) => {\n    const error = fromZodIssue({\n        ...issue,\n        message: issue.message ?? ctx.defaultError,\n    });\n    return {\n        message: error.message,\n    };\n};\n"],
  "mappings": ";;;;;;;;AAAA,IAAM,kBAAkB;AACjB,SAAS,SAAS,MAAM;AAC3B,MAAI,KAAK,WAAW,GAAG;AACnB,WAAO,KAAK,CAAC,EAAE,SAAS;AAAA,EAC5B;AACA,SAAO,KAAK,OAAO,CAAC,KAAK,SAAS;AAC9B,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,MAAM,MAAM,KAAK,SAAS,IAAI;AAAA,IACzC;AACA,QAAI,KAAK,SAAS,GAAG,GAAG;AACpB,aAAO,MAAM,OAAO,aAAa,IAAI,IAAI;AAAA,IAC7C;AACA,QAAI,CAAC,gBAAgB,KAAK,IAAI,GAAG;AAC7B,aAAO,MAAM,OAAO,OAAO;AAAA,IAC/B;AACA,UAAM,YAAY,IAAI,WAAW,IAAI,KAAK;AAC1C,WAAO,MAAM,YAAY;AAAA,EAC7B,GAAG,EAAE;AACT;AACA,SAAS,aAAa,KAAK;AACvB,SAAO,IAAI,QAAQ,MAAM,KAAK;AAClC;;;ACrBO,SAAS,gBAAgB,OAAO;AACnC,SAAO,MAAM,WAAW;AAC5B;;;ACCA,IAAM,wBAAwB;AAC9B,IAAM,kBAAkB;AACxB,IAAM,kBAAkB;AACxB,IAAM,SAAS;AACf,IAAM,mBAAmB;AAClB,IAAM,kBAAN,cAA8B,MAAM;AAAA,EAGvC,YAAY,SAAS,UAAU,CAAC,GAAG;AAC/B,UAAM,OAAO;AAHjB;AACA;AAGI,SAAK,UAAU;AACf,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,SAAS,uBAAuB,OAAO;AACnC,QAAM,EAAE,OAAO,gBAAgB,gBAAgB,YAAY,IAAI;AAC/D,MAAI,MAAM,SAAS,iBAAiB;AAChC,WAAO,MAAM,YACR,OAAO,CAAC,KAAK,aAAa;AAC3B,YAAM,YAAY,SAAS,OACtB,IAAI,CAACA,WAAU,uBAAuB;AAAA,QACvC,OAAAA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC,CAAC,EACG,KAAK,cAAc;AACxB,UAAI,CAAC,IAAI,SAAS,SAAS,GAAG;AAC1B,YAAI,KAAK,SAAS;AAAA,MACtB;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC,EACA,KAAK,cAAc;AAAA,EAC5B;AACA,MAAI,eAAe,gBAAgB,MAAM,IAAI,GAAG;AAC5C,QAAI,MAAM,KAAK,WAAW,GAAG;AACzB,YAAM,aAAa,MAAM,KAAK,CAAC;AAC/B,UAAI,OAAO,eAAe,UAAU;AAChC,eAAO,GAAG,MAAM,OAAO,aAAa,UAAU;AAAA,MAClD;AAAA,IACJ;AACA,WAAO,GAAG,MAAM,OAAO,QAAQ,SAAS,MAAM,IAAI,CAAC;AAAA,EACvD;AACA,SAAO,MAAM;AACjB;AACA,SAAS,2BAA2B,QAAQ,QAAQ,iBAAiB;AACjE,MAAI,WAAW,MAAM;AACjB,QAAI,OAAO,SAAS,GAAG;AACnB,aAAO,CAAC,QAAQ,MAAM,EAAE,KAAK,eAAe;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AACA,MAAI,OAAO,SAAS,GAAG;AACnB,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACO,SAAS,aAAa,OAAO,UAAU,CAAC,GAAG;AAC9C,QAAM,EAAE,iBAAiB,iBAAiB,iBAAiB,iBAAiB,kBAAkB,kBAAkB,SAAS,QAAQ,cAAc,KAAM,IAAI;AACzJ,QAAM,SAAS,uBAAuB;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACD,QAAM,UAAU,2BAA2B,QAAQ,QAAQ,eAAe;AAC1E,SAAO,IAAI,gBAAgB,SAAS,CAAC,KAAK,CAAC;AAC/C;AACO,SAAS,aAAa,UAAU,UAAU,CAAC,GAAG;AACjD,QAAM,EAAE,qBAAqB,uBAAuB,iBAAiB,iBAAiB,iBAAiB,iBAAiB,kBAAkB,kBAAkB,SAAS,QAAQ,cAAc,KAAM,IAAI;AACrM,QAAM,SAAS,SAAS,OACnB,MAAM,GAAG,kBAAkB,EAC3B,IAAI,CAAC,UAAU,uBAAuB;AAAA,IACvC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC,CAAC,EACG,KAAK,cAAc;AACxB,QAAM,UAAU,2BAA2B,QAAQ,QAAQ,eAAe;AAC1E,SAAO,IAAI,gBAAgB,SAAS,SAAS,MAAM;AACvD;AACO,IAAM,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ;AACxD,MAAI,eAAmB,UAAU;AAC7B,WAAO,aAAa,KAAK,OAAO;AAAA,EACpC;AACA,MAAI,eAAe,OAAO;AACtB,WAAO,IAAI,gBAAgB,IAAI,OAAO;AAAA,EAC1C;AACA,SAAO,IAAI,gBAAgB,eAAe;AAC9C;AACO,SAAS,kBAAkB,KAAK;AACnC,SAAO,eAAe;AAC1B;AACO,SAAS,sBAAsB,KAAK;AACvC,SAAO,eAAe,SAAS,IAAI,SAAS;AAChD;AACO,IAAM,WAAW,CAAC,OAAO,QAAQ;AACpC,QAAM,QAAQ,aAAa;AAAA,IACvB,GAAG;AAAA,IACH,SAAS,MAAM,WAAW,IAAI;AAAA,EAClC,CAAC;AACD,SAAO;AAAA,IACH,SAAS,MAAM;AAAA,EACnB;AACJ;",
  "names": ["issue"]
}
